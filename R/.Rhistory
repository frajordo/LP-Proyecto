ic=NULL
vc=abs(qnorm((1-(conf/100))))
for (i in seq_len(ncol(datos))){
x=datos[,i]
u=mean(x)
v=sd(x)
error=v/sqrt(length(x))
mError=vc*error
inf=u-mError
sup=u+mError
y=cbind(inf,u,sup)
if (length(ic)==0){
ic=matrix(y,nrow = 1)
} else {
ic=rbind(ic,y)
}
}
return (as.data.frame(ic))
}
intervalos=interCalc(m,90)
intervalos
intervalos=interCalc(m,90)
z=intervalos[intervalos$u>=10 || intervalos$u<11]
z
intervalos=interCalc(m,90)
z=intervalos[intervalos$u>=10 && intervalos$u<11]
z
intervalos=interCalc(m,90)
for (i in seq_len(nrow(intervalos))){
res=abs(intervalos$sup-intervalos$inf)
}
res
#7.05
datos=c(4,3,4,1,1,9,2,1,5,5,5,1,2,1,1,2,4,1,6,4,6,2,1,3,9,4,1,2)
datos=matrix(datos)
dim(datos)
intervalos=interCalc(datos,95)
intervalos
#7.07
interCalcDF=function (datos,nivelConf,df) {
datosIC <- NULL
valorCritico <- abs(qt(1-(nivelConf/100),df=df))
for (i in seq_len(ncol(datos))){
d <- datos[,i]
media <- mean(d)
desv <- sd(d)
errorS <- desv/sqrt(length(d))
margenE <- valorCritico*errorS
lim_inf <- (media - margenE)
lim_sup <- (media + margenE)
l <- cbind(lim_inf,media,lim_sup)
if (length(datosIC) == 0){
datosIC <- matrix(l,nrow = 1)
colnames(datosIC) <- c("lim_inf","media","lim_sup")
}
else{
datosIC <- rbind(datosIC,l)
}
}
return (as.data.frame(datosIC))
}
datos=c(991,989,990,992,990,987,989,993,988,991,989,990,993,987)
datos=matrix(datos)
dim(datos) #n menor a 30. No se puede hacer límite central
intervalos=interCalcDF(datos,95,dim(datos)[1]-1)
intervalos
#22
#montero modificado
u1=18.09
s1=0.108
x=rnorm(100,mean=u1,sd=sqrt(s1))
#montero no modificado
u2=19
s2=0.067
y=rnorm(100,mean = u2,sd=sqrt(s2))
var.test(x,y)
var.test(x,y,conf.level = 0.04)
#22
#montero modificado
u1=18.09
s1=0.108
x=rnorm(10,mean=u1,sd=sqrt(s1))
#montero no modificado
u2=19
s2=0.067
y=rnorm(10,mean = u2,sd=sqrt(s2))
var.test(x,y,conf.level = 0.04)
#23
seguro=c(24,35,5)
ansioso=c(11,10,13)
(cuenta2<-table(seguro,ansioso))
(cuenta3<-prop.table(table(seguro,ansioso)))
prop.table(cuenta2,margin=2)
barplot(table(seguro,ansioso),legend=TRUE,las=1,args.legend = c(x="top"),horiz = TRUE,col = 1:10)
barplot(table(seguro,ansioso),legend=TRUE,las=1,args.legend = c(x="topright"),beside = TRUE,col=1:10)
#23
seguro=c(24,35,5)
ansioso=c(11,10,13)
(x<-table(seguro,ansioso))
(y<-prop.table(table(seguro,ansioso)))
prop.table(cuenta2,margin=2)
barplot(table(ansioso,seguro),legend=TRUE,las=1,args.legend = c(x="top"),horiz = TRUE,col = 1:10)
barplot(table(ansioso,seguro),legend=TRUE,las=1,args.legend = c(x="topright"),beside = TRUE,col=1:10)
fisher.test(x=x,alternative = "tienen relación",simulate.p.value = TRUE)
chisq.test(x)
chisq.test(x,y)
chisq.test(seguro,ansioso)
barplot(table(ansioso,seguro),legend=TRUE,las=1,args.legend = c(x="top"),horiz = TRUE,col = 1:10)
barplot(table(ansioso,seguro),legend=TRUE,las=1,args.legend = c(x="topright"),beside = TRUE,col=1:10)
chisq.test(x)
x
z=cbind(seguro,ansioso)
z
chisq.test(z)
#23
seguro=c(24,35,5)
ansioso=c(11,10,13)
baja=c(24,11)
moderada=c(35,10)
alta=c(5,13)
caca=cbind(baja,moderada,alta)
z=cbind(seguro,ansioso)
chisq.test(z)
chisq.test(caca)
#22
#montero modificado
u1=18.09
s1=0.108
x=rnorm(10,mean=u1,sd=sqrt(s1))
#montero no modificado
u2=19
s2=0.067
y=rnorm(10,mean = u2,sd=sqrt(s2))
var.test(x,y,conf.level = 0.04)
#22
#montero modificado
u1=18.09
s1=0.108
x=rnorm(100,mean=u1,sd=sqrt(s1))
#montero no modificado
u2=19
s2=0.067
y=rnorm(100,mean = u2,sd=sqrt(s2))
var.test(x,y,conf.level = 0.04)
#22
#montero modificado
u1=18.09
s1=0.108
x=rnorm(1000,mean=u1,sd=sqrt(s1))
#montero no modificado
u2=19
s2=0.067
y=rnorm(1000,mean = u2,sd=sqrt(s2))
var.test(x,y,conf.level = 0.04)
sqrt(s1)
s1*s1
install.packages("dplyr")
install.packages("tidyr")
install.packages("readxl")
installed.packages()
library("dplyr")
library("dplyr")
library("tidyr")
library("tidyr")
install.packages("tidyr")
library("tidyr")
library("tidyr")
library("tidyr")
library("tidyr")
library("tidyr")
library("tidyr")
library("readxl")
library("dplyr")
library("readxl")
library("dplyr")
library("tidyr")
install.packages("tidyr")
install.packages("readxl")
library("readxl")
library("dplyr")
library("tidyr")
installed.packages()
install.packages("readxl")
library("rematch")
install.packages("readxl")
install.packages("dplyr")
install.packages("dplyr")
install.packages("tidyr")
available.packages()["tidyr",]
install.packages("tidyr")
library("tidyr")
installed.packages()
library("tidyr")
install.packages("tidyr")
install.packages("tidyr")
library("tidyr")
install.packages("tidyr")
install.packages("readxl")
library("readxl")
library("dplyr")
library("tidyr")
#install.packages("dplyr")
#install.packages("tidyr")
#install.packages("readxl")
#Esta es una práctica de BEST: Behavioral Economics & Data Science Team
#2019-02-04
#0. Instalar paquetes necesarios para la práctica si no los tiene instalados.
#Si ya los instaló solo coméntelos.
#install.packages("dplyr")
#install.packages("tidyr")
#install.packages("readxl")
#Validar si los paquetes se han instalado
library(dplyr)
library(tidyr)
library(readxl)
?readxl #para conocer un poco mas sobre una librería
#1. Lectura de Datos
#1.1 Descargando y renombrando el archivo,
fileUrl="http://intranet2.sbs.gob.pe/estadistica/financiera/2018/Junio/B-2401-jn2018.XLS"
download.file(fileUrl,destfile="archivoPractica.XLS",mode="wb") #wb se utiliza para archivos excel, no son de texto plano
datos<-readxl::read_xlsx("archivoPractica.XLS")  #cargando el dataframe
View(datos) #para observar los datos
#2. Selección de datos y Limpieza
#2.1. Eliminar filas/celdas del encabezado del reporte
datos<-readxl::read_xlsx("archivoPractica.xls",skip = 5) #saltamos 5 filas
View(datos)
#2.2. Eliminar filas donde hayan NA
datos<-datos[complete.cases(datos),] # solo seleccionamos filas completas (sin NA)
View(datos)
#2.2. Auxiliar si se borran todas las filas (SOLO PROBAR SI EN EL 2.2 SE LE HA BORRADO TODO, SINO VAYA AL 2.3)
#En el caso de que su dataframe quede vacío será porque en su versión se ha agregado una columna llena de NA
datos<-readxl::read_xlsx("archivoPractica.xls",skip = 5) #saltamos 5 filas
datos<-datos[complete.cases(datos),] # solo seleccionamos filas completas (sin NA)
View(datos)
#2.3. Eliminar columnas que no se necesiten
names(datos)[10] #nombres de las columnas, hay una que no es Banco
datos<-datos[,-10]# eliminar la columna 10 si no es un banco
View(datos)
#3. Estandarizar el dataframe
#3.1 Imprime los campos restantes
names(datos) #obtener los nombres de Instituciones Financiera
#renombras las columnas
#3.2 Cambiar nombre de columnas
names(datos)<- c("variables", "BBVA","B Comercio", "BCP",
"Pichincha","BIF","Scotiabank",
"Citibank","Interbank","Mibanco",
"GNB","Falabella","Santander","Ripley","Azteca","Cencosud","ICBC",
"Total")
View(datos) #el dataframe tiene nuevos campos
#4. Transformar datos
#4.1. Cambiar exponenciales, redondear
options(scipen=999) # para desactivar la nomenclatura cientifica de números
exc = !names(datos) %in% "variables" # una forma de elegir todo excepto una columna de un vector
exc # va a aplicar todo excepto a la primera columna
datos[,exc] # ven? no aparece la columns "variables"
datos[,exc] = sapply(datos[,exc],as.character) # lo convierto a character.
#Es buena practica convertir siempre a character tus datos numéricos y luego pasarlos a numeric recién.
#¿Por qué? Porque a veces por alguna razón el excel no est´á bien formado y te podría aparecer tipo factor
#o character y tener problemas y no darte cuenta hasta el proceso de modelación
datos[,exc] = sapply(datos[,exc],as.numeric) # lo conviertes a numérico
datos[,exc] = round(datos[,exc],2) #si deseas redondear a 2 cifras
View(a)
#4.2. Restructurar Dataframe para visualizaciones, Bancos son registros, indicadores columnas
datos %>% gather() %>% View() #vista como un diccionario: key, value
datos %>% gather(Bancos) %>% View() #vista Bancos es key
datos %>% gather(Bancos,valores) %>% View() #vista Bancos es key, valores value
datos %>% gather(Bancos,valores,-variables) %>% View() #vista, incluyendo columna variables
dataDif<-datos%>% gather(Bancos,valores,-variables)
dataDif %>% spread(variables,valores) %>% View() #invierte las variables a columnas
datosListos<-dataDif %>% spread(variables,valores)
datosListos$Fecha= as.Date("2021-01-13") #agregamos una columna si deseamos
View(datosListos) #vista previa antes de guardar
#5 Almacenar datos limpios y transformados
#5.1. Guardar datos transformados
saveRDS(datosListos,file="misDatosParaGraficar.RDS") #Guardar los datos
#6. Analisis de datos (tarea)
#6.1. Lea el archivo generado RDS y grafique 3 tipos de visualizaciones con los datos obtenidos.
#Estos gráficos deben responder a 3 análisis que ud proponga.
#6.2. Redactar 3 preguntas de alto nivel y generar un fichero csv con estadísticas o con
#los resultados de consultas específicas.
#install.packages("dplyr")
#install.packages("tidyr")
#install.packages("readxl")
#Esta es una práctica de BEST: Behavioral Economics & Data Science Team
#2019-02-04
#0. Instalar paquetes necesarios para la práctica si no los tiene instalados.
#Si ya los instaló solo coméntelos.
#install.packages("dplyr")
#install.packages("tidyr")
#install.packages("readxl")
#Validar si los paquetes se han instalado
library(dplyr)
library(tidyr)
library(readxl)
?readxl #para conocer un poco mas sobre una librería
#1. Lectura de Datos
#1.1 Descargando y renombrando el archivo,
fileUrl="http://intranet2.sbs.gob.pe/estadistica/financiera/2018/Junio/B-2401-jn2018.XLS"
download.file(fileUrl,destfile="archivoPractica.XLS",mode="wb") #wb se utiliza para archivos excel, no son de texto plano
datos<-readxl::read_xlsx("archivoPractica.XLS")  #cargando el dataframe
View(datos) #para observar los datos
#2. Selección de datos y Limpieza
#2.1. Eliminar filas/celdas del encabezado del reporte
datos<-readxl::read_xlsx("archivoPractica.xls",skip = 5) #saltamos 5 filas
View(datos)
#2.2. Eliminar filas donde hayan NA
datos<-datos[complete.cases(datos),] # solo seleccionamos filas completas (sin NA)
View(datos)
#2.2. Auxiliar si se borran todas las filas (SOLO PROBAR SI EN EL 2.2 SE LE HA BORRADO TODO, SINO VAYA AL 2.3)
#En el caso de que su dataframe quede vacío será porque en su versión se ha agregado una columna llena de NA
datos<-readxl::read_xlsx("archivoPractica.xls",skip = 5) #saltamos 5 filas
datos<-datos[complete.cases(datos),] # solo seleccionamos filas completas (sin NA)
View(datos)
#2.3. Eliminar columnas que no se necesiten
names(datos)[10] #nombres de las columnas, hay una que no es Banco
datos<-datos[,-10]# eliminar la columna 10 si no es un banco
View(datos)
#3. Estandarizar el dataframe
#3.1 Imprime los campos restantes
names(datos) #obtener los nombres de Instituciones Financiera
#renombras las columnas
#3.2 Cambiar nombre de columnas
names(datos)<- c("variables", "BBVA","B Comercio", "BCP",
"Pichincha","BIF","Scotiabank",
"Citibank","Interbank","Mibanco",
"GNB","Falabella","Santander","Ripley","Azteca","Cencosud","ICBC",
"Total")
View(datos) #el dataframe tiene nuevos campos
#4. Transformar datos
#4.1. Cambiar exponenciales, redondear
options(scipen=999) # para desactivar la nomenclatura cientifica de números
exc = !names(datos) %in% "variables" # una forma de elegir todo excepto una columna de un vector
exc # va a aplicar todo excepto a la primera columna
datos[,exc] # ven? no aparece la columns "variables"
datos[,exc] = sapply(datos[,exc],as.character) # lo convierto a character.
#Es buena practica convertir siempre a character tus datos numéricos y luego pasarlos a numeric recién.
#¿Por qué? Porque a veces por alguna razón el excel no est´á bien formado y te podría aparecer tipo factor
#o character y tener problemas y no darte cuenta hasta el proceso de modelación
datos[,exc] = sapply(datos[,exc],as.numeric) # lo conviertes a numérico
datos[,exc] = round(datos[,exc],2) #si deseas redondear a 2 cifras
View(a)
#4.2. Restructurar Dataframe para visualizaciones, Bancos son registros, indicadores columnas
datos %>% gather() %>% View() #vista como un diccionario: key, value
datos %>% gather(Bancos) %>% View() #vista Bancos es key
datos %>% gather(Bancos,valores) %>% View() #vista Bancos es key, valores value
datos %>% gather(Bancos,valores,-variables) %>% View() #vista, incluyendo columna variables
dataDif<-datos%>% gather(Bancos,valores,-variables)
dataDif %>% spread(variables,valores) %>% View() #invierte las variables a columnas
datosListos<-dataDif %>% spread(variables,valores)
datosListos$Fecha= as.Date("2021-01-13") #agregamos una columna si deseamos
View(datosListos) #vista previa antes de guardar
#5 Almacenar datos limpios y transformados
#5.1. Guardar datos transformados
saveRDS(datosListos,file="misDatosParaGraficar.RDS") #Guardar los datos
#6. Analisis de datos (tarea)
#6.1. Lea el archivo generado RDS y grafique 3 tipos de visualizaciones con los datos obtenidos.
#Estos gráficos deben responder a 3 análisis que ud proponga.
#6.2. Redactar 3 preguntas de alto nivel y generar un fichero csv con estadísticas o con
#los resultados de consultas específicas.
rds= readRDS("C:\Users\Franklin\Documents\misDatosParaGraficar.RDS")
rds
rds= readRDS('C:\Users\Franklin\Documents\misDatosParaGraficar.RDS')
rds
rds= readRDS(C:\Users\Franklin\Documents\misDatosParaGraficar.RDS)
rds
rds=readRDS("C:/Users/Franklin/Documents/misDatosParaGraficar.RDS")
rds
rds$Bancos
rds$`Caja y Bancos en ME / Obligaciones a la Vista ME ( N° de veces)`
plot(rds$Bancos,rds$`Gastos de Operación / Margen Financiero Total`)
plot(rds)
hist(rds$`Ingresos Financieros / Ingresos Totales`)
hist(rds$`Ingresos Financieros / Ingresos Totales`)
hist(rds$`Ingresos Financieros / Ingresos Totales`, main = "Ingresos financieros")
view(rds)
View(datosListos) #vista previa antes de guardar
hist(rds$Bancos,rds$`Ingresos Financieros / Ingresos Totales`, main = "Ingresos financieros")
prop.table(rds$Bancos,rds$`Depósitos / Número de Oficinas ( S/ Miles )`)
array(rds$Bancos,rds$`Depósitos / Número de Oficinas ( S/ Miles )`)
table(rds$Bancos,rds$`Depósitos / Número de Oficinas ( S/ Miles )`)
data.frame(first=rds$Bancos,second=rds$`Depósitos / Número de Oficinas ( S/ Miles )`)
barplot(x)
barplot(x)
hist(x)
x=data.frame(first=rds$Bancos,second=rds$`Ingresos Financieros / Ingresos Totales`)
barplot(x)
hist(x)
x
barplot(x)
x=data.frame(levels=rds$Bancos,second=rds$`Ingresos Financieros / Ingresos Totales`)
x
x=data.frame(levels=rds$Bancos[:-1],second=rds$`Ingresos Financieros / Ingresos Totales`)
x
occur=matrix(rds$`Ingresos Financieros / Ingresos Totales`)
occur
occur=matrix(rds$`Ingresos Financieros / Ingresos Totales`)
colnames(occur)="Ingresos financieros/ingresos totales"
occur
rownames(occur)=rds$Bancos
occur
barplot(occur)
occur=as.table(occur)
occur
barplot(occur)
occur=t(occur)
occur=as.table(occur)
barplot(occur)
barplot(occur, main = "Bancos vs Ingresos") #Analísis de gráficos en barra viendo un Banco vs Ingresos
plot(occur)
plot(rds$Bancos,rds$`Utilidad Neta Anualizada / Activo Promedio`)
#install.packages("dplyr")
#install.packages("tidyr")
#install.packages("readxl")
install.packages("agricolae")
library(agricolae)
plot(rds$Bancos,rds$`Utilidad Neta Anualizada / Activo Promedio`)
plot(occur)
plot(occur,type = "l")
plot(rds$`Créditos Directos / Personal ( S/ Miles )`)
plot(rds$`Utilidad Neta Anualizada / Activo Promedio`,rds$`Utilidad Neta Anualizada / Patrimonio Promedio`)
plot(rds$`Utilidad Neta Anualizada / Activo Promedio`,rds$`Utilidad Neta Anualizada / Patrimonio Promedio`, type = "l")
plot(rds$`Utilidad Neta Anualizada / Activo Promedio`,rds$`Utilidad Neta Anualizada / Patrimonio Promedio`, type = "l")
plot(rds$`Utilidad Neta Anualizada / Activo Promedio`,rds$`Utilidad Neta Anualizada / Patrimonio Promedio`)
plot(rds$`Utilidad Neta Anualizada / Activo Promedio`,rds$`Utilidad Neta Anualizada / Patrimonio Promedio`,type="o")
plot(rds$`Utilidad Neta Anualizada / Activo Promedio`,rds$`Utilidad Neta Anualizada / Patrimonio Promedio`,type="b")
plot(rds$`Utilidad Neta Anualizada / Activo Promedio`,rds$`Utilidad Neta Anualizada / Patrimonio Promedio`,type="l")
plot(rds$`Utilidad Neta Anualizada / Patrimonio Promedio`,rds$`Utilidad Neta Anualizada / Activo Promedio`,type="l")
plot(rds$`Utilidad Neta Anualizada / Patrimonio Promedio`,rds$`Utilidad Neta Anualizada / Activo Promedio`)
boxplot(rds$`Utilidad Neta Anualizada / Patrimonio Promedio`,rds$`Utilidad Neta Anualizada / Activo Promedio`)
boxplot(rds$`Depósitos / Número de Oficinas ( S/ Miles )`)
boxplot(hist(rds$`Depósitos / Número de Oficinas ( S/ Miles )`))
fdt(rds$`Depósitos / Número de Oficinas ( S/ Miles )`)
#install.packages("dplyr")
#install.packages("tidyr")
#install.packages("readxl")
#install.packages("agricolae")
install.packages("fdth")
fdt(rds$`Depósitos / Número de Oficinas ( S/ Miles )`)
library(fdth)
fdt(rds$`Depósitos / Número de Oficinas ( S/ Miles )`)
y
y=fdt(rds$`Depósitos / Número de Oficinas ( S/ Miles )`)
y
y=fdt(rds$`Depósitos / Número de Oficinas ( S/ Miles )`)
plot()
y
y=fdt(rds$`Créditos Directos / Personal ( S/ Miles )`)
y
y=fdt(rds$`Créditos Refinanciados y Reestructurados / Créditos Directos`)
y
plot(y)
lines(y)
lines(y$table$`Class limits`,y$table$f)
lines(y$table$rf,y$table$f)
plot(y)
lines(y$table$rf,y$table$f)
lines(y$table$rf,y$table$f)
plot(y)
lines(y$table$`Class limits`,y$table$f)
y$table$`Class limits`
lines(y$table$`Class limits`-1,y$table$f)
y$table$`Class limits`-1
y$table$`Class limits`
y$table$`Class limits`[0]
plot(y)
plot(y$table$`Class limits`,y$table$f)
plot(y$table$`Class limits`,y$table$f, type="l")
y
plot(y$table$cf,y$table$`cf(%)`)
plot(y$table$cf,y$table$`cf(%)`,type = "l")
plot(y$table$cf,y$table$`cf(%)`,type = "o")
mp = c(min(h$mids) - (h$mids[2] - h$mids[1]), h$mids, max(h$mids) + (h$mids[2] - h$mids[1]))
h=hist(rds$`Depósitos / Número de Oficinas ( S/ Miles )`, main = "Depositos/numero de oficinas") #Análisis histograma de depositos/número de oficinas
h
barplot(occur, main = "Bancos vs Ingresos") #Analísis de gráficos en barra viendo un Banco vs Ingresos
h=hist(rds$`Créditos Directos / Personal ( S/ Miles )`, main = "Depositos/numero de oficinas") #Análisis histograma de depositos/número de oficinas
h=hist(rds$`Ingresos Financieros Anualizados / Activo Productivo Promedio`, main = "Depositos/numero de oficinas") #Análisis histograma de depositos/número de oficinas
h=hist(rds$`Créditos Directos / Personal ( S/ Miles )`, main = "Depositos/numero de oficinas") #Análisis histograma de depositos/número de oficinas
h=hist(rds$`Depósitos / Número de Oficinas ( S/ Miles )`, main = "Depositos/numero de oficinas") #Análisis histograma de depositos/número de oficinas
h=hist(rds$`Provisiones / Créditos Atrasados`, main = "Depositos/numero de oficinas") #Análisis histograma de depositos/número de oficinas
h
mp = c(min(h$mids) - (h$mids[2] - h$mids[1]), h$mids, max(h$mids) + (h$mids[2] - h$mids[1]))
mp
lines(mp, freq, type = "b", pch = 20, col = "red", lwd = 3)
freq = c(0, h$counts, 0)
freq
lines(mp, freq, type = "b", pch = 20, col = "red", lwd = 3)
plot(t[1:10],col=distinctColorPalette(10),type = "h")
#Proyecto LP
#install.packages("randomcoloR")
library("randomcoloR")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
datos=read.csv("../-Ecuador.csv")
#que empresas/empleadores ofrecen mï¿½s empleo?
empleadores=table(datos$Empleador)
emplSorted=sort(empleadores,decreasing=TRUE)
#grafica de los 10 empleadores con mas ofertas en todo el ecuador
barplot(emplSorted[1:10],legend=TRUE, col = distinctColorPalette(10))
#grafica de los 10 empleadores con mas ofertas en todo el ecuador sin contar a los N/A
barplot(emplSorted[2:11],legend=TRUE, col = distinctColorPalette(10))
#Guayaquil
guayaquil=datos[datos$Localizacion=="Guayaquil",]
emplSortedGye=sort(table(guayaquil$Empleador),decreasing = TRUE)
pie(emplSortedGye[1:6],col = distinctColorPalette(6))
pie(emplSortedGye[2:7],col = distinctColorPalette(6))
#Quito
quito=datos[datos$Localizacion=="Quito",]
emplSortedQto=sort(table(quito$Empleador),decreasing = TRUE)
pie(emplSortedQto[1:6],col = distinctColorPalette(6))
pie(emplSortedQto[2:7],col = distinctColorPalette(6))
t=sort(table(datos$Fecha),decreasing = TRUE)
plot(t[1:10],col=distinctColorPalette(10),type = "h")
